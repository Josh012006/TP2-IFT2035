;; Tests qui marchent autant à la compilataion qu'à l'exécution


;; Tester une fonction récursive , une définition locale de fonction
;; et l'énoncé if
;; La fonction de fibonacci
(def 
  ((fib ((n Int)) Int (if (<= n 1) (n) (+ (fib (- n 1)) (fib (- n 2))) )))
  (fib 9))                                                           ; ↝ 34


;; Tester une abstraction avec un appel currifié de fonction
((abs ((x1 (Int -> Int -> Int))
      (x2 Int)
      (x3 Int))
    (x1 x2 x3)) * 6 3)                                              ; ↝ 18


;; Tester une définition mutuellement récursive, la définition d'un type 
;; algébrique, l'énoncé filter et l'énoncé new

(adt Tree
    ((empty:)
     (node: Tree Int Tree))
  (def ((sumLeft ((t Tree))
         Int (filter t (empty: 0) 
                       ((node: l n r) (+ n (+ (sumRight l) (sumRight r))))))
        (sumRight ((t Tree))
         Int (filter t (empty: 0) 
                       ((node: l n r) (+ n (+ (sumLeft l) (sumLeft r))))))
       )
    (sumLeft (new node: 
      (new node: (new node: (new empty:) 5 
          (new node: (new empty:) 4 (new empty:))) 9 (new empty:)) 
      2 
      (new node: (new node: (new empty:) 8 (new empty:)) 3 (new empty:))
    ))
))                                                                   ; ↝ 31





;; Tests avec erreurs de type


;; Le paramètre n'a pas le type attendu

(def ((y 9)
      (divY ((x Int))
        Int (/ x y)))
  (divY +))                                                         ; ↝ error

;; Les corps des branchements n'ont pas tous les mêmes types

(adt String
      ((nil:)
       (char: Int String))
    ((abs ((s String))
       (filter s (nil: 0) ((char: c cs) cs)))
      (new char: 64 (new char: 65 (new nil:))))
)                                                                    ; ↝ error

;; Une erreur au niveau du typage statique mais qui ne serait pas 
;; remarquées à l'exécution

(adt ListInt
      ((nil:) (cons: Int ListInt))
  (def ((y 48)
      (div6 ((x Int))
        ListInt (/ x 6)))
    (divY y)) )                                                      ; ↝ error









